(() => {
  if (window.bootstrapThemePicker) return;

  const tokens = ["primary", "secondary", "success", "danger", "warning", "light", "dark"];
  const defaults = {
    primary: "#0d6efd",
    secondary: "#6c757d",
    success: "#198754",
    danger: "#dc3545",
    warning: "#ffc107",
    light: "#f8f9fa",
    dark: "#212529",
  };
  const themes = [
    { id: "current", name: "Use current colors", source: "This page", colors: {} },
    {
      id: "flatly",
      name: "Flatly",
      source: "Bootswatch",
      colors: {
        primary: "#2c3e50",
        secondary: "#95a5a6",
        success: "#18bc9c",
        danger: "#e74c3c",
        warning: "#f39c12",
        light: "#ecf0f1",
        dark: "#233140",
      },
    },
    {
      id: "cosmo",
      name: "Cosmo",
      source: "Bootswatch",
      colors: {
        primary: "#2780e3",
        secondary: "#373a3c",
        success: "#3fb618",
        danger: "#ff0039",
        warning: "#ff7518",
        light: "#f8f9fa",
        dark: "#1a1a1a",
      },
    },
    {
      id: "morph",
      name: "Morph",
      source: "Bootswatch",
      colors: {
        primary: "#645cff",
        secondary: "#868e96",
        success: "#1dd3b0",
        danger: "#ff6b6b",
        warning: "#ffd166",
        light: "#f2f4f8",
        dark: "#1f1c2e",
      },
    },
    {
      id: "lux",
      name: "Lux",
      source: "Bootswatch",
      colors: {
        primary: "#1a1a1a",
        secondary: "#adb5bd",
        success: "#28a745",
        danger: "#dc3545",
        warning: "#f0ad4e",
        light: "#f8f9fa",
        dark: "#000000",
      },
    },
    {
      id: "lumen",
      name: "Lumen",
      source: "Bootswatch",
      colors: {
        primary: "#158cba",
        secondary: "#999999",
        success: "#28b62c",
        danger: "#ff4136",
        warning: "#ff851b",
        light: "#ffffff",
        dark: "#111111",
      },
    },
    {
      id: "minty",
      name: "Minty",
      source: "Bootswatch",
      colors: {
        primary: "#0abde3",
        secondary: "#576574",
        success: "#10ac84",
        danger: "#ee5253",
        warning: "#feca57",
        light: "#f5f6fa",
        dark: "#222f3e",
      },
    },
    {
      id: "journal",
      name: "Journal",
      source: "Bootswatch",
      colors: {
        primary: "#eb6864",
        secondary: "#aaaaaa",
        success: "#22b24c",
        danger: "#f57a00",
        warning: "#f3e03b",
        light: "#ffffff",
        dark: "#555555",
      },
    },
    {
      id: "yeti",
      name: "Yeti",
      source: "Bootswatch",
      colors: {
        primary: "#008cba",
        secondary: "#6c757d",
        success: "#43ac6a",
        danger: "#f04124",
        warning: "#e99002",
        light: "#f1f4f7",
        dark: "#0f2537",
      },
    },
  ];

  const modalId = "bootstrap-theme-picker";
  const styleId = "bootstrap-theme-picker-style";
  let state = null;

  const readCurrentColors = () => {
    const computed = getComputedStyle(document.documentElement);
    const colors = {};
    tokens.forEach((token) => {
      const value = computed.getPropertyValue(`--bs-${token}`).trim();
      colors[token] = value || defaults[token];
    });
    return colors;
  };

  const applyColors = (colors) => {
    tokens.forEach((token) => {
      const value = colors[token];
      if (value) document.documentElement.style.setProperty(`--bs-${token}`, value);
    });
  };

  const isHex = (value) => /^#(?:[0-9a-f]{3}|[0-9a-f]{6})$/i.test(value);

  const setSelectValue = (value) => {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    const select = modal.querySelector("#theme-select");
    if (select instanceof HTMLSelectElement) select.value = value;
  };

  const showError = (message) => {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    const alert = modal.querySelector('[data-role="error"]');
    if (!(alert instanceof HTMLElement)) return;
    alert.textContent = message || "";
    alert.classList.toggle("show", Boolean(message));
  };

  const ensureStyles = () => {
    if (document.getElementById(styleId)) return;
    const style = document.createElement("style");
    style.id = styleId;
    style.textContent = `
      #${modalId} {
        position: fixed;
        inset: 0;
        z-index: 2147483647;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: var(--bs-body-font-family, system-ui, sans-serif);
      }
      #${modalId} .btp-backdrop {
        position: absolute;
        inset: 0;
        background: rgba(15, 23, 42, 0.55);
        backdrop-filter: blur(2px);
      }
      #${modalId} .btp-panel {
        position: relative;
        width: min(960px, calc(100% - 2rem));
        max-height: calc(100% - 2rem);
        overflow: auto;
        background: var(--bs-body-bg, #ffffff);
        color: var(--bs-body-color, #212529);
        border-radius: 1rem;
        box-shadow: 0 1.5rem 3rem rgba(15, 23, 42, 0.35);
        padding: 1.75rem;
      }
      #${modalId} .btp-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        gap: 1rem;
      }
      #${modalId} .btp-close {
        border: none;
        background: none;
        font-size: 1.75rem;
        line-height: 1;
        color: inherit;
        padding: 0.25rem;
      }
      #${modalId} .btp-grid {
        display: grid;
        gap: 1rem;
        margin: 1.5rem 0;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      }
      #${modalId} .btp-swatch {
        padding: 1rem;
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 0.75rem;
        background: rgba(255, 255, 255, 0.75);
      }
      #${modalId} .btp-swatch label {
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-weight: 600;
        margin-bottom: 0.75rem;
        text-transform: capitalize;
      }
      #${modalId} .btp-swatch .form-control-color {
        width: 3rem;
        padding: 0;
        height: 2.5rem;
      }
      #${modalId} .btp-preview {
        display: grid;
        gap: 0.75rem;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
      }
      #${modalId} [data-role="error"] {
        display: none;
      }
      #${modalId} [data-role="error"].show {
        display: block;
      }
      #${modalId} .btp-footer {
        margin-top: 1.5rem;
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
        justify-content: space-between;
        font-size: 0.9rem;
        color: var(--bs-secondary-color, #6c757d);
      }
      #${modalId} .btp-chip {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        border-radius: 999px;
        padding: 0.25rem 0.75rem;
        background: rgba(0, 0, 0, 0.08);
        font-size: 0.85rem;
      }
    `;
    document.head.appendChild(style);
  };

  const buildModal = () => {
    const wrapper = document.createElement("div");
    wrapper.id = modalId;
    wrapper.innerHTML = `
      <div class="btp-backdrop" data-role="dismiss"></div>
      <div class="btp-panel" role="dialog" aria-modal="true" aria-labelledby="btp-title">
        <div class="btp-header">
          <div>
            <h2 id="btp-title" class="h4 mb-1">Bootstrap Theme Picker</h2>
            <p class="text-secondary mb-0">Adjust the key Bootstrap colors and preview the results instantly.</p>
          </div>
          <button type="button" class="btp-close" aria-label="Close" data-role="dismiss">&times;</button>
        </div>
        <label class="form-label fw-semibold mt-3">
          Choose a preset palette
          <select id="theme-select" class="form-select form-select-sm mt-2">
            ${themes.map((theme) => `<option value="${theme.id}">${theme.name} Â· ${theme.source}</option>`).join("")}
          </select>
        </label>
        <div class="btp-grid">
          ${tokens
            .map(
              (token) => `
                <div class="btp-swatch">
                  <label for="btp-${token}">
                    <span>${token}</span>
                    <span class="badge rounded-pill text-bg-secondary btp-chip">--bs-${token}</span>
                  </label>
                  <div class="input-group input-group-sm">
                    <input class="form-control form-control-color" data-role="color" data-token="${token}" id="btp-${token}" aria-label="${token} color" />
                    <input class="form-control" data-role="text" data-token="${token}" aria-label="${token} hex" placeholder="#000000" />
                  </div>
                </div>
              `,
            )
            .join("")}
        </div>
        <div class="alert alert-warning py-2 px-3" data-role="error" role="alert"></div>
        <div class="btp-preview">
          <button class="btn btn-primary">Primary button</button>
          <button class="btn btn-secondary">Secondary button</button>
          <div class="alert alert-warning mb-0" role="alert">Warning alert</div>
          <div class="alert alert-danger mb-0" role="alert">Danger alert</div>
          <div class="card border-0 shadow-sm">
            <div class="card-body">
              <h3 class="h6">Card heading</h3>
              <p class="mb-0 text-secondary">Buttons and alerts above update with your palette.</p>
            </div>
          </div>
        </div>
        <div class="btp-footer">
          <span>Tip: Paste hex codes like <code>#1a2b3c</code> or pick a color swatch.</span>
          <button type="button" class="btn btn-outline-secondary btn-sm" data-role="dismiss">Close</button>
        </div>
      </div>
    `;
    return wrapper;
  };

  const syncInputs = () => {
    const modal = document.getElementById(modalId);
    if (!modal || !state) return;
    tokens.forEach((token) => {
      const text = modal.querySelector(`input[data-role="text"][data-token="${token}"]`);
      const color = modal.querySelector(`input[data-role="color"][data-token="${token}"]`);
      const value = state.colors[token];
      if (text instanceof HTMLInputElement) {
        text.value = value ?? "";
        text.classList.remove("is-invalid");
      }
      if (color instanceof HTMLInputElement) color.value = value ?? "#000000";
    });
  };

  const syncTokenInputs = (token) => {
    const modal = document.getElementById(modalId);
    if (!modal || !state) return;
    const text = modal.querySelector(`input[data-role="text"][data-token="${token}"]`);
    const color = modal.querySelector(`input[data-role="color"][data-token="${token}"]`);
    const value = state.colors[token];
    if (text instanceof HTMLInputElement) {
      text.value = value ?? "";
      text.classList.remove("is-invalid");
    }
    if (color instanceof HTMLInputElement) color.value = value ?? "#000000";
  };

  const handleTextInput = (event) => {
    if (!state) return;
    const target = event.target;
    if (!(target instanceof HTMLInputElement)) return;
    const token = target.dataset.token;
    if (!token) return;
    const value = target.value.trim();
    if (isHex(value)) {
      const normalized = value.startsWith("#") ? value.toLowerCase() : `#${value.toLowerCase()}`;
      state.colors[token] = normalized;
      applyColors(state.colors);
      syncTokenInputs(token);
      showError("");
      setSelectValue("custom");
      return;
    }
    state.colors[token] = state.colors[token] ?? defaults[token];
    target.classList.add("is-invalid");
    showError("Enter colors as #RGB or #RRGGBB.");
  };

  const handleColorInput = (event) => {
    if (!state) return;
    const target = event.target;
    if (!(target instanceof HTMLInputElement)) return;
    const token = target.dataset.token;
    if (!token) return;
    const value = target.value.trim();
    if (isHex(value)) {
      const normalized = value.toLowerCase();
      state.colors[token] = normalized;
      applyColors(state.colors);
      syncTokenInputs(token);
      showError("");
      setSelectValue("custom");
      return;
    }
    showError("Select a color swatch or enter a hex value.");
  };

  const handlePresetChange = (event) => {
    if (!state) return;
    const select = event.target;
    if (!(select instanceof HTMLSelectElement)) return;
    const theme = themes.find((candidate) => candidate.id === select.value);
    if (!theme) {
      state.themeId = "custom";
      setSelectValue("custom");
      return;
    }
    const colors = { ...state.colors };
    if (theme.colors) Object.assign(colors, theme.colors);
    state = { themeId: theme.id, colors };
    applyColors(state.colors);
    syncInputs();
    showError("");
    setSelectValue(theme.id);
  };

  const handleDismiss = (event) => {
    const target = event.target;
    if (!(target instanceof HTMLElement)) return;
    if (target.dataset.role !== "dismiss" && !target.closest('[data-role="dismiss"]')) return;
    close();
  };

  const close = () => {
    const modal = document.getElementById(modalId);
    if (modal) modal.remove();
    state = null;
  };

  window.bootstrapThemePicker = {
    open() {
      ensureStyles();
      const existing = document.getElementById(modalId);
      if (existing) {
        const first = existing.querySelector('input[data-role="text"][data-token="primary"]');
        if (first instanceof HTMLInputElement) first.focus();
        return;
      }
      state = { themeId: "current", colors: readCurrentColors() };
      applyColors(state.colors);
      const modal = buildModal();
      document.body.appendChild(modal);
      syncInputs();
      const select = modal.querySelector("#theme-select");
      if (select instanceof HTMLSelectElement) select.value = "current";
      modal.addEventListener("input", (event) => {
        const target = event.target;
        if (!(target instanceof HTMLInputElement)) return;
        if (target.dataset.role === "text") handleTextInput(event);
        else if (target.dataset.role === "color") handleColorInput(event);
      });
      modal.addEventListener("change", handlePresetChange);
      modal.addEventListener("click", handleDismiss);
    },
    close,
  };
})();
