// @ts-check
(() => {
  if (window.bootstrapThemePicker) return;

  /** @typedef {"primary"|"secondary"|"success"|"danger"|"warning"|"light"|"dark"} Token */
  /** @typedef {{ themeId: string, colors: Record<Token, string> }} PickerState */

  /** @type {readonly Token[]} */
  const tokens = ["primary", "secondary", "success", "danger", "warning", "light", "dark"];
  /** @type {Record<Token, string>} */
  const defaults = {
    primary: "#0d6efd",
    secondary: "#6c757d",
    success: "#198754",
    danger: "#dc3545",
    warning: "#ffc107",
    light: "#f8f9fa",
    dark: "#212529",
  };
  const themes = [
    { id: "current", name: "Use current colors", source: "This page", colors: /** @type {Partial<Record<Token, string>>} */ ({}) },
    {
      id: "flatly",
      name: "Flatly",
      source: "Bootswatch",
      colors: {
        primary: "#2c3e50",
        secondary: "#95a5a6",
        success: "#18bc9c",
        danger: "#e74c3c",
        warning: "#f39c12",
        light: "#ecf0f1",
        dark: "#233140",
      },
    },
    {
      id: "cosmo",
      name: "Cosmo",
      source: "Bootswatch",
      colors: {
        primary: "#2780e3",
        secondary: "#373a3c",
        success: "#3fb618",
        danger: "#ff0039",
        warning: "#ff7518",
        light: "#f8f9fa",
        dark: "#373a3c",
      },
    },
    {
      id: "journal",
      name: "Journal",
      source: "Bootswatch",
      colors: {
        primary: "#eb6864",
        secondary: "#aaa",
        success: "#22b24c",
        danger: "#f13c4f",
        warning: "#f2a654",
        light: "#f8f5f0",
        dark: "#3e3f3a",
      },
    },
    {
      id: "pulse",
      name: "Pulse",
      source: "Bootswatch",
      colors: {
        primary: "#593196",
        secondary: "#adb5bd",
        success: "#12b886",
        danger: "#e64980",
        warning: "#f76707",
        light: "#f8f9fa",
        dark: "#343a40",
      },
    },
    {
      id: "minty",
      name: "Minty",
      source: "Bootswatch",
      colors: {
        primary: "#78c2ad",
        secondary: "#f3969a",
        success: "#56cc9d",
        danger: "#ff6f69",
        warning: "#ffcc5c",
        light: "#f8f9fa",
        dark: "#434a54",
      },
    },
    {
      id: "slate",
      name: "Slate",
      source: "Bootswatch",
      colors: {
        primary: "#3a3f44",
        secondary: "#7a8288",
        success: "#62c462",
        danger: "#ee5f5b",
        warning: "#f89406",
        light: "#f5f5f5",
        dark: "#2f3235",
      },
    },
  ];

  const modalId = "bootstrap-theme-picker";
  const styleId = "bootstrap-theme-picker-style";
  /** @type {PickerState | null} */
  let state = null;

  /** @param {HTMLElement} element */
  const focusFirstPicker = (element) => {
    const first = element.querySelector('input[data-role="color"][data-token="primary"]');
    if (first instanceof HTMLInputElement) first.focus();
  };

  const ensureStyles = () => {
    if (document.getElementById(styleId)) return;
    const style = document.createElement("style");
    style.id = styleId;
    style.textContent = `#${modalId}{position:fixed;inset:0;z-index:2147483647;display:flex;align-items:center;justify-content:center;font-family:var(--bs-body-font-family,system-ui,sans-serif);}#${modalId} .btp-backdrop{position:absolute;inset:0;background:rgba(15,23,42,0.55);backdrop-filter:blur(2px);}#${modalId} .btp-panel{position:relative;width:min(960px,calc(100% - 2rem));max-height:calc(100% - 2rem);overflow:auto;background:var(--bs-body-bg,#ffffff);color:var(--bs-body-color,#212529);border-radius:1rem;box-shadow:0 1.5rem 3rem rgba(15,23,42,0.35);padding:1.75rem;}#${modalId} .btp-header{display:flex;align-items:flex-start;justify-content:space-between;gap:1rem;}#${modalId} .btp-close{border:none;background:none;font-size:1.75rem;line-height:1;color:inherit;padding:0.25rem;}#${modalId} .btp-grid{display:grid;gap:1rem;margin:1.5rem 0;grid-template-columns:repeat(auto-fit,minmax(180px,1fr));}#${modalId} .btp-swatch{padding:1rem;border:1px solid rgba(0,0,0,0.1);border-radius:0.75rem;background:rgba(255,255,255,0.9);}#${modalId} .btp-swatch label{display:flex;align-items:center;justify-content:space-between;font-weight:600;margin-bottom:0.75rem;text-transform:capitalize;}#${modalId} .btp-swatch input[type="color"]{width:100%;height:3rem;border:none;padding:0;background:none;}#${modalId} .btp-preview{display:grid;gap:0.75rem;grid-template-columns:repeat(auto-fit,minmax(140px,1fr));}#${modalId} .btp-footer{margin-top:1.5rem;display:flex;flex-wrap:wrap;gap:1rem;align-items:center;justify-content:space-between;font-size:0.9rem;color:var(--bs-secondary-color,#6c757d);} `;
    document.head.appendChild(style);
  };

  /** @returns {Record<Token, string>} */
  const readCurrentColors = () => {
    const computed = getComputedStyle(document.documentElement);
    /** @type {Record<Token, string>} */
    const colors = { ...defaults };
    tokens.forEach((token) => {
      const value = computed.getPropertyValue(`--bs-${token}`).trim();
      if (value) colors[token] = normalizeHex(value) ?? colors[token];
    });
    return colors;
  };

  /** @param {string} value */
  const normalizeHex = (value) => {
    const trimmed = value.trim().toLowerCase();
    if (/^#(?:[0-9a-f]{3}|[0-9a-f]{6})$/i.test(trimmed)) {
      if (trimmed.length === 4) {
        return `#${trimmed[1]}${trimmed[1]}${trimmed[2]}${trimmed[2]}${trimmed[3]}${trimmed[3]}`;
      }
      return trimmed;
    }
    return null;
  };

  /** @param {string} hex */
  const hexToRgb = (hex) => {
    const normalized = normalizeHex(hex);
    if (!normalized) return null;
    const value = Number.parseInt(normalized.slice(1), 16);
    if (Number.isNaN(value)) return null;
    const r = (value >> 16) & 255;
    const g = (value >> 8) & 255;
    const b = value & 255;
    return { r, g, b };
  };

  const componentToHex = (value) => value.toString(16).padStart(2, "0");

  const rgbToHex = ({ r, g, b }) => `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;

  const clamp = (value) => Math.max(0, Math.min(255, Math.round(value)));

  const mix = (hex, factor) => {
    const rgb = hexToRgb(hex);
    if (!rgb) return hex;
    const target = factor > 0 ? 255 : 0;
    const weight = Math.abs(factor);
    return rgbToHex({
      r: clamp(rgb.r * (1 - weight) + target * weight),
      g: clamp(rgb.g * (1 - weight) + target * weight),
      b: clamp(rgb.b * (1 - weight) + target * weight),
    });
  };

  const contrastColor = (hex) => {
    const rgb = hexToRgb(hex);
    if (!rgb) return "#ffffff";
    const luminance = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
    return luminance > 0.6 ? "#000000" : "#ffffff";
  };

  const rgbString = (hex) => {
    const rgb = hexToRgb(hex);
    if (!rgb) return "";
    return `${rgb.r}, ${rgb.g}, ${rgb.b}`;
  };

  const paint = (selector, painter) => {
    document.querySelectorAll(selector).forEach((node) => {
      if (node instanceof HTMLElement) painter(node);
    });
  };

  /** @typedef {{ buttons: string; alerts: string; text: string; backgrounds: string; borders: string; links: string }} VariantSelectors */

  const variantSelectors = tokens.reduce(
    (acc, token) => {
      acc[token] = {
        buttons: `.btn-${token}`,
        alerts: `.alert-${token}`,
        text: `.text-${token}`,
        backgrounds: `.bg-${token}, .text-bg-${token}`,
        borders: `.border-${token}`,
        links: `.link-${token}`,
      };
      return acc;
    },
    /** @type {Record<Token, VariantSelectors>} */ ({})
  );

  const updateButtons = (selector, hex) => {
    if (!selector) return;
    const hover = mix(hex, -0.15);
    const active = mix(hex, -0.3);
    const text = contrastColor(hex);
    paint(selector, (element) => {
      element.style.backgroundColor = hex;
      element.style.borderColor = hex;
      element.style.color = text;
      element.style.setProperty("--bs-btn-bg", hex);
      element.style.setProperty("--bs-btn-border-color", hex);
      element.style.setProperty("--bs-btn-hover-bg", hover);
      element.style.setProperty("--bs-btn-hover-border-color", hover);
      element.style.setProperty("--bs-btn-active-bg", active);
      element.style.setProperty("--bs-btn-active-border-color", active);
      element.style.setProperty("--bs-btn-color", text);
      element.style.setProperty("--bs-btn-hover-color", text);
      element.style.setProperty("--bs-btn-active-color", text);
      element.style.setProperty("--bs-btn-disabled-bg", hex);
      element.style.setProperty("--bs-btn-disabled-border-color", hex);
    });
  };

  const updateAlerts = (selector, hex) => {
    if (!selector) return;
    const bg = mix(hex, 0.55);
    const border = mix(hex, 0.1);
    const text = contrastColor(bg);
    paint(selector, (element) => {
      element.style.backgroundColor = bg;
      element.style.borderColor = border;
      element.style.color = text;
      element.style.setProperty("--bs-alert-bg", bg);
      element.style.setProperty("--bs-alert-border-color", border);
      element.style.setProperty("--bs-alert-color", text);
    });
  };

  const updateText = (selector, hex) => {
    if (!selector) return;
    paint(selector, (element) => {
      element.style.color = hex;
    });
  };

  const updateBackgrounds = (selector, hex) => {
    if (!selector) return;
    const text = contrastColor(hex);
    paint(selector, (element) => {
      element.style.backgroundColor = hex;
      element.style.color = text;
    });
  };

  const updateBorders = (selector, hex) => {
    if (!selector) return;
    paint(selector, (element) => {
      element.style.borderColor = hex;
    });
  };

  const updateLinks = (selector, hex) => {
    if (!selector) return;
    const hover = mix(hex, -0.2);
    paint(selector, (element) => {
      element.style.color = hex;
      element.style.setProperty("--bs-link-color", hex);
      element.style.setProperty("--bs-link-hover-color", hover);
    });
  };

  const applyVariantStyles = (token, hex) => {
    const selectors = variantSelectors[token];
    if (!selectors) return;
    updateButtons(selectors.buttons ?? "", hex);
    updateAlerts(selectors.alerts ?? "", hex);
    updateText(selectors.text ?? "", hex);
    updateBackgrounds(selectors.backgrounds ?? "", hex);
    updateBorders(selectors.borders ?? "", hex);
    updateLinks(selectors.links ?? "", hex);
  };

  /** @param {Record<Token, string>} colors */
  const applyColors = (colors) => {
    const root = document.documentElement;
    tokens.forEach((token) => {
      const hex = colors[token] ?? defaults[token];
      root.style.setProperty(`--bs-${token}`, hex);
      const rgb = rgbString(hex);
      if (rgb) root.style.setProperty(`--bs-${token}-rgb`, rgb);
      applyVariantStyles(token, hex);
    });
    const primary = colors.primary ?? defaults.primary;
    root.style.setProperty("--bs-link-color", primary);
    root.style.setProperty("--bs-link-hover-color", mix(primary, -0.2));
  };

  const showError = (message) => {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    const alert = modal.querySelector('[data-role="error"]');
    if (!(alert instanceof HTMLElement)) return;
    alert.textContent = message;
    alert.classList.toggle("d-none", !message);
  };

  const syncInputs = () => {
    if (!state) return;
    const modal = document.getElementById(modalId);
    if (!modal) return;
    tokens.forEach((token) => syncTokenInputs(modal, token));
  };

  /** @param {HTMLElement} modal @param {Token} token */
  const syncTokenInputs = (modal, token) => {
    if (!state) return;
    const color = modal.querySelector(`input[data-role="color"][data-token="${token}"]`);
    if (color instanceof HTMLInputElement) color.value = state.colors[token];
    const valueLabel = modal.querySelector(`[data-role="value"][data-token="${token}"]`);
    if (valueLabel instanceof HTMLElement) valueLabel.textContent = state.colors[token];
  };

  /** @param {Event} event */
  const handleColorInput = (event) => {
    if (!state) return;
    const target = event.target;
    if (!(target instanceof HTMLInputElement)) return;
    if (target.dataset.role !== "color") return;
    const token = /** @type {Token | undefined} */ (target.dataset.token);
    if (!token) return;
    const hex = normalizeHex(target.value);
    if (!hex) {
      showError("Select a color using the picker or enter a valid hex value.");
      return;
    }
    state.colors[token] = hex;
    state.themeId = "custom";
    applyColors(state.colors);
    const modal = target.closest(`#${modalId}`);
    if (modal instanceof HTMLElement) syncTokenInputs(modal, token);
    showError("");
    setSelectValue("custom");
  };

  const setSelectValue = (value) => {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    const select = modal.querySelector("#theme-select");
    if (select instanceof HTMLSelectElement) select.value = value;
  };

  /** @param {Event} event */
  const handlePresetChange = (event) => {
    if (!state) return;
    const target = event.target;
    if (!(target instanceof HTMLSelectElement)) return;
    const theme = themes.find((candidate) => candidate.id === target.value);
    if (!theme) {
      state.themeId = "custom";
      setSelectValue("custom");
      return;
    }
    const colors = { ...state.colors };
    Object.entries(theme.colors ?? {}).forEach(([token, value]) => {
      const normalized = normalizeHex(value);
      if (normalized) colors[/** @type {Token} */ (token)] = normalized;
    });
    state = { themeId: theme.id, colors };
    applyColors(state.colors);
    syncInputs();
    showError("");
  };

  const handleDismiss = (event) => {
    const target = event.target;
    if (!(target instanceof HTMLElement)) return;
    if (target.dataset.role === "dismiss" || target.closest('[data-role="dismiss"]')) close();
  };

  const buildModal = () => {
    const wrapper = document.createElement("div");
    wrapper.id = modalId;
    wrapper.innerHTML = `
      <div class="btp-backdrop" data-role="dismiss"></div>
      <div class="btp-panel" role="dialog" aria-modal="true" aria-labelledby="btp-title">
        <div class="btp-header">
          <div>
            <h2 id="btp-title" class="h4 mb-1">Bootstrap Theme Picker</h2>
            <p class="text-secondary mb-0">Adjust the key Bootstrap colors and preview the results instantly.</p>
          </div>
          <button type="button" class="btp-close" aria-label="Close" data-role="dismiss">&times;</button>
        </div>
        <label class="form-label fw-semibold mt-3">
          Choose a preset palette
          <select id="theme-select" class="form-select form-select-sm mt-2">
            ${themes
              .map((theme) => `<option value="${theme.id}">${theme.name} · ${theme.source}</option>`)
              .join("")}
            <option value="custom">Custom palette</option>
          </select>
        </label>
        <div class="btp-grid">
          ${tokens
            .map(
              (token) => `
                <div class="btp-swatch">
                  <label for="btp-${token}">
                    <span>${token}</span>
                  </label>
                  <input
                    type="color"
                    class="form-control"
                    data-role="color"
                    data-token="${token}"
                    id="btp-${token}"
                    aria-label="${token} color"
                  />
                  <div class="form-text text-secondary mt-2" data-role="value" data-token="${token}"></div>
                </div>
              `,
            )
            .join("")}
        </div>
        <div class="alert alert-warning py-2 px-3 d-none" data-role="error" role="alert"></div>
        <div class="btp-preview">
          <button class="btn btn-primary">Primary button</button>
          <button class="btn btn-secondary">Secondary button</button>
          <div class="alert alert-warning mb-0" role="alert">Warning alert</div>
          <div class="alert alert-danger mb-0" role="alert">Danger alert</div>
          <div class="card border-0 shadow-sm">
            <div class="card-body">
              <h3 class="h6">Card heading</h3>
              <p class="mb-0 text-secondary">Buttons and alerts above update with your palette.</p>
            </div>
          </div>
        </div>
        <div class="btp-footer">
          <span>Tip: Paste hex codes like <code>#1a2b3c</code> or pick a color swatch.</span>
          <button type="button" class="btn btn-outline-secondary btn-sm" data-role="dismiss">Close</button>
        </div>
      </div>
    `;
    return wrapper;
  };

  const close = () => {
    const modal = document.getElementById(modalId);
    if (modal) modal.remove();
    state = null;
  };

  window.bootstrapThemePicker = {
    open() {
      ensureStyles();
      const existing = document.getElementById(modalId);
      if (existing) {
        focusFirstPicker(existing);
        return;
      }
      state = { themeId: "current", colors: readCurrentColors() };
      applyColors(state.colors);
      const modal = buildModal();
      document.body.appendChild(modal);
      syncInputs();
      setSelectValue("current");
      focusFirstPicker(modal);
      modal.addEventListener("input", handleColorInput);
      modal.addEventListener("change", handlePresetChange);
      modal.addEventListener("click", handleDismiss);
    },
    close,
  };
})();
